{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red63\green127\blue95;\red0\green0\blue192;
\red42\green0\blue255;\red106\green62\blue62;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c0\c0\c75294;
\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c41569\c24314\c24314;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 package\cf0  cloud;\
\
\pard\pardeftab720\partightenfactor0
\cf3 // File name:HillCipher.java\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 import\cf0  java.util.*;\
\cf2 class\cf0  Basic\{\
  String \cf4 allChar\cf0 =\cf5 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\cf0 ;\
  \cf2 int\cf0  indexOfChar(\cf2 char\cf0  \cf6 c\cf0 )\
 \{\
  \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 allChar\cf0 .length();\cf6 i\cf0 ++)\
  \{\
   \cf2 if\cf0 (\cf4 allChar\cf0 .charAt(\cf6 i\cf0 )==\cf6 c\cf0 )\
    \cf2 return\cf0  \cf6 i\cf0 ;\
  \}\
  \cf2 return\cf0  -1;\
 \}\
  \
 \cf2 char\cf0  charAtIndex(\cf2 int\cf0  \cf6 pos\cf0 )\
 \{\
  \cf2 return\cf0  \cf4 allChar\cf0 .charAt(\cf6 pos\cf0 );\
 \}\
\}\
\cf2 class\cf0  Hill\{\
     \
        Hill(\cf2 int\cf0  \cf6 block\cf0 )\
        \{\
            \cf2 this\cf0 .\cf4 block\cf0 =\cf6 block\cf0 ;\
        \}\
     \
       Basic \cf4 b1\cf0 =\cf2 new\cf0  Basic();\
       \cf2 int\cf0  \cf4 block\cf0 =2;\
       \cf2 int\cf0  \cf4 key\cf0 [][]=\cf2 new\cf0  \cf2 int\cf0 [\cf4 block\cf0 ][\cf4 block\cf0 ];\
        \
        \
       \cf2 void\cf0  keyInsert()\cf2 throws\cf0  Exception\
       \{\
           Scanner \cf6 \ul \ulc6 scn\cf0 \ulnone =\cf2 new\cf0  Scanner(System.\cf4 in\cf0 );\
           System.\cf4 out\cf0 .println(\cf5 "Enter key Matrix"\cf0 );\
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
           \{\
                \cf2 for\cf0 (\cf2 int\cf0  \cf6 j\cf0 =0;\cf6 j\cf0  < \cf4 block\cf0 ;\cf6 j\cf0 ++)\
                \{\
                    \cf4 key\cf0 [\cf6 i\cf0 ][\cf6 j\cf0 ]=\cf6 scn\cf0 .nextInt();\
                \} \
           \}\
       \}\
        \
       \cf2 void\cf0  KeyInverseInsert()\cf2 throws\cf0  Exception\
       \{\
           Scanner \cf6 \ul \ulc6 scn\cf0 \ulnone =\cf2 new\cf0  Scanner(System.\cf4 in\cf0 );\
           System.\cf4 out\cf0 .println(\cf5 "Enter key Inverse Matrix:"\cf0 );\
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
           \{\
                \cf2 for\cf0 (\cf2 int\cf0  \cf6 j\cf0 =0;\cf6 j\cf0  < \cf4 block\cf0 ;\cf6 j\cf0 ++)\
                \{\
                    \cf4 key\cf0 [\cf6 i\cf0 ][\cf6 j\cf0 ]=\cf6 scn\cf0 .nextInt();\
                \} \
           \}\
       \}\
        \
       String encryptBlock(String \cf6 plain\cf0 )\cf2 throws\cf0  Exception\
       \{\
           \cf6 plain\cf0 =\cf6 plain\cf0 .toUpperCase();\
           \cf2 int\cf0  \cf6 a\cf0 [][]=\cf2 new\cf0  \cf2 int\cf0 [\cf4 block\cf0 ][1],\cf6 sum\cf0 =0;\
           \cf2 int\cf0  \cf6 cipherMatrix\cf0 [][]=\cf2 new\cf0  \cf2 int\cf0 [\cf4 block\cf0 ][1];\
           String \cf6 cipher\cf0 =\cf5 ""\cf0 ;\
            \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
           \{\
               \cf6 a\cf0 [\cf6 i\cf0 ][0]=\cf4 b1\cf0 .indexOfChar(\cf6 plain\cf0 .charAt(\cf6 i\cf0 ));\
           \}\
        \
            \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
   \{\
    \cf2 for\cf0 (\cf2 int\cf0  \cf6 j\cf0 =0;\cf6 j\cf0  < 1;\cf6 j\cf0 ++)\
    \{   \
     \cf2 for\cf0 (\cf2 int\cf0  \cf6 k\cf0 =0;\cf6 k\cf0  < \cf4 block\cf0 ;\cf6 k\cf0 ++)\
     \{\
      \cf6 sum\cf0 =\cf6 sum\cf0 +\cf4 key\cf0 [\cf6 i\cf0 ][\cf6 k\cf0 ]*\cf6 a\cf0 [\cf6 k\cf0 ][\cf6 j\cf0 ];\
     \}\
     \cf6 cipherMatrix\cf0 [\cf6 i\cf0 ][\cf6 j\cf0 ] = \cf6 sum\cf0 %26;\
     \cf6 sum\cf0  = 0;\
    \}\
   \}\
           \
            \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
           \{\
              \cf6 cipher\cf0 +=\cf4 b1\cf0 .charAtIndex(\cf6 cipherMatrix\cf0 [\cf6 i\cf0 ][0]);\
           \}\
           \cf2 return\cf0  \cf6 cipher\cf0 ;\
       \}\
        \
       String encrypt(String \cf6 plainText\cf0 )\cf2 throws\cf0  Exception\
       \{\
           String \cf6 cipherText\cf0 =\cf5 ""\cf0 ;\
            keyInsert();\
            \
            \cf6 plainText\cf0 =\cf6 plainText\cf0 .toUpperCase();\
             \
               \cf2 int\cf0  \cf6 len\cf0 =\cf6 plainText\cf0 .length();\
          \cf3 // System.out.println(plainText.substring(1,2+1));\cf0 \
            \
               \cf2 while\cf0 (\cf6 len\cf0 %\cf4 block\cf0 !=0)\
               \{\
                   \cf6 plainText\cf0 +=\cf5 "X"\cf0 ;\
                   System.\cf4 out\cf0 .println(\cf6 len\cf0 );\
                   \cf6 len\cf0 =\cf6 plainText\cf0 .length();\
               \}\
            \
            \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf6 len\cf0 -1;\cf6 i\cf0 =\cf6 i\cf0 +\cf4 block\cf0 )\
           \{\
              \cf6 cipherText\cf0 +=encryptBlock(\cf6 plainText\cf0 .substring(\cf6 i\cf0 ,\cf6 i\cf0 +\cf4 block\cf0 ));\
              \cf6 cipherText\cf0 +=\cf5 " "\cf0 ; \
           \}\
           \cf2 return\cf0  \cf6 cipherText\cf0 ;\
       \}\
        \
        String decryptBlock(String \cf6 cipher\cf0 )\cf2 throws\cf0  Exception\
       \{\
           \cf6 cipher\cf0 =\cf6 cipher\cf0 .toUpperCase();\
           \cf2 int\cf0  \cf6 a\cf0 [][]=\cf2 new\cf0  \cf2 int\cf0 [\cf4 block\cf0 ][1],\cf6 sum\cf0 =0;\
           \cf2 int\cf0  \cf6 plainMatrix\cf0 [][]=\cf2 new\cf0  \cf2 int\cf0 [\cf4 block\cf0 ][1];\
           String \cf6 plain\cf0 =\cf5 ""\cf0 ;\
            \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
           \{\
               \cf6 a\cf0 [\cf6 i\cf0 ][0]=\cf4 b1\cf0 .indexOfChar(\cf6 cipher\cf0 .charAt(\cf6 i\cf0 ));\
           \}\
        \
            \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
   \{\
    \cf2 for\cf0 (\cf2 int\cf0  \cf6 j\cf0 =0;\cf6 j\cf0  < 1;\cf6 j\cf0 ++)\
    \{   \
     \cf2 for\cf0 (\cf2 int\cf0  \cf6 k\cf0 =0;\cf6 k\cf0  < \cf4 block\cf0 ;\cf6 k\cf0 ++)\
     \{\
      \cf6 sum\cf0 =\cf6 sum\cf0 +\cf4 key\cf0 [\cf6 i\cf0 ][\cf6 k\cf0 ]*\cf6 a\cf0 [\cf6 k\cf0 ][\cf6 j\cf0 ];\
     \}\
                                        \cf2 while\cf0 (\cf6 sum\cf0  < 0)\
                                        \{\
                                              \cf6 sum\cf0 +=26;\
                                        \}\
     \cf6 plainMatrix\cf0 [\cf6 i\cf0 ][\cf6 j\cf0 ] = \cf6 sum\cf0 ;\
     \cf6 sum\cf0  = 0;\
    \}\
   \}\
           \
            \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf4 block\cf0 ;\cf6 i\cf0 ++)\
           \{\
              \cf6 plain\cf0 +=\cf4 b1\cf0 .charAtIndex(\cf6 plainMatrix\cf0 [\cf6 i\cf0 ][0]);\
           \}\
           \cf2 return\cf0  \cf6 plain\cf0 ;\
       \}\
        \
       String Decrypt(String \cf6 cipherText\cf0 )\cf2 throws\cf0  Exception\
       \{\
           String \cf6 plainText\cf0 =\cf5 ""\cf0 ;\
           KeyInverseInsert();\
           \cf6 cipherText\cf0 =\cf6 cipherText\cf0 .replaceAll(\cf5 " "\cf0 , \cf5 ""\cf0 );\
            \
            \cf6 cipherText\cf0 =\cf6 cipherText\cf0 .toUpperCase();\
             \
               \cf2 int\cf0  \cf6 len\cf0 =\cf6 cipherText\cf0 .length(); \
 \
           \cf2 for\cf0 (\cf2 int\cf0  \cf6 i\cf0 =0;\cf6 i\cf0  < \cf6 len\cf0 -1;\cf6 i\cf0 =\cf6 i\cf0 +\cf4 block\cf0 )\
           \{\
              \cf6 plainText\cf0 +=decryptBlock(\cf6 cipherText\cf0 .substring(\cf6 i\cf0 ,\cf6 i\cf0 +\cf4 block\cf0 ));\
              \cf6 plainText\cf0 +=\cf5 " "\cf0 ; \
           \}\
           \cf2 return\cf0  \cf6 plainText\cf0 ;\
       \}\
        \
\}\
 \
\cf2 class\cf0  HillCipher\{\
       \cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String \cf6 args\cf0 [])\cf2 throws\cf0  Exception\
       \{\
           String \cf6 plainText\cf0 ,\cf6 cipherText\cf0 ;  \
           \cf2 int\cf0  \cf6 block\cf0 ;\
           Scanner \cf6 \ul \ulc6 scn\cf0 \ulnone =\cf2 new\cf0  Scanner(System.\cf4 in\cf0 );\
           \
           System.\cf4 out\cf0 .println(\cf5 "Enter plain-text:"\cf0 );\
           \cf6 plainText\cf0 =\cf6 scn\cf0 .nextLine();\
            \
           System.\cf4 out\cf0 .println(\cf5 "Enter block size of matrix:"\cf0 );\
           \cf6 block\cf0 =\cf6 scn\cf0 .nextInt();\
           Hill \cf6 hill\cf0 =\cf2 new\cf0  Hill(\cf6 block\cf0 );\
            \
           \cf6 plainText\cf0 =\cf6 plainText\cf0 .replaceAll(\cf5 " "\cf0 , \cf5 ""\cf0 );\
           \cf6 cipherText\cf0 = \cf6 hill\cf0 .encrypt(\cf6 plainText\cf0 );\
            \
           System.\cf4 out\cf0 .println(\cf5 "Encrypted Text is:\\n"\cf0 +\cf6 cipherText\cf0 );\
            \
           String \cf6 decryptedText\cf0 = \cf6 hill\cf0 .Decrypt(\cf6 cipherText\cf0 );\
           System.\cf4 out\cf0 .println(\cf5 "Decrypted Text is:\\n"\cf0 +\cf6 decryptedText\cf0 );\
            \
                     \
       \}\
\}}